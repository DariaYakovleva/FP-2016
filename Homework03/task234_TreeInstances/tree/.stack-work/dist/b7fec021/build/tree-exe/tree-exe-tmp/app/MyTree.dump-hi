
==================== FINAL INTERFACE ====================
2016-10-03 15:05:38.443777 UTC

interface main@main:MyTree 8001
  interface hash: a3b971d3b27bc2937abbab6d21a89b0a
  ABI hash: 9dd3f925afdb3e999879d09d846dbfb7
  export-list hash: 44099b431f30f09cb4e34fc858165407
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 60192411fc1519029272f2246b00ed2e
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyTree.delete
  MyTree.find
  MyTree.insert
  MyTree.next
  TreePrinters.directoryPrint
  TreePrinters.verticalPrint
  TreePrinters.Tree{TreePrinters.Leaf TreePrinters.Node}
module dependencies: TreePrinters
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  TreePrinters abd6bece097c9867539cfa5c003cf831
  exports: 4685953fbb6e299dfed767d6c15ac578
  Leaf 77a78419be7fd1f046153e2ec8372a05
  Node a032a16efd07f373b461861084de4927
  Tree 60771f65fafab6f6ae9a6c6028f179a8
  directoryPrint 2bb2b4aab57d55d0dc5dcd868ae77751
  verticalPrint 51c10993f2e87c8bd9b6943638b30f46
96c34a2f0b6c00e83865fd6725d4db1a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyTree.$trModule2
                   MyTree.$trModule1) -}
1fb938d55a48e75b609bc97fa0633457
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyTree"#) -}
0123290ac0fa01709368526bda294ed8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
399db25fbfb1be8b5bf46f47fca6ee4b
  $winsert ::
    GHC.Classes.Ord a =>
    TreePrinters.Tree a
    -> a -> (# a, TreePrinters.Tree a, TreePrinters.Tree a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: [0] -}
c33f5d8891276e607313914b66877679
  delete ::
    GHC.Classes.Ord a =>
    TreePrinters.Tree a -> a -> TreePrinters.Tree a
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U> -}
4975e7a4886a5f798a1890524f425ab4
  find ::
    GHC.Classes.Ord a =>
    TreePrinters.Tree a -> a -> TreePrinters.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U> -}
0a73d40cc5509d016f2aa044de6e27f3
  insert ::
    GHC.Classes.Ord a =>
    TreePrinters.Tree a -> a -> TreePrinters.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: TreePrinters.Tree a)
                   (w2 :: a) ->
                 case MyTree.$winsert @ a w w1 w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 TreePrinters.Node @ a ww1 ww2 ww3 }) -}
a02b38bc5f689f18b16d23d722570745
  next ::
    GHC.Classes.Ord a => TreePrinters.Tree a -> a -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

