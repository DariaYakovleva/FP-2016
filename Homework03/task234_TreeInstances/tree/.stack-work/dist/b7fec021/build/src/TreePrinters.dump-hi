
==================== FINAL INTERFACE ====================
2016-10-03 15:05:35.8955246 UTC

interface tree-0.1.0.0-JpsvyQa6nxvD4Ud8cPg3VY:TreePrinters 8001
  interface hash: f5ea73908783783ec36df0380666397d
  ABI hash: 1b49633a9ab6dcfa5359c3a9191a93d3
  export-list hash: 9ebdd32986f1e74e86be8deda4df7cb8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 25cbe2433be57020a5227c589213ab9e
  sig of: Nothing
  used TH splices: False
  where
exports:
  TreePrinters.directoryPrint
  TreePrinters.verticalPrint
  TreePrinters.Tree{TreePrinters.Leaf TreePrinters.Node}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char 793b969914b1622fef8ab278ed0a2b7f
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.List d711f98b49ef5d33e5b3d404631ed073
import  -/  base-4.9.0.0:Data.OldList 3c899c6d8e6204063769214449ac0954
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:GHC.Unicode 01f7a6469be023f2c0f9e458d1a0270d
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
944fd93808ac6b45d4910c76f15dfd64
  $fFunctorTree :: GHC.Base.Functor TreePrinters.Tree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TreePrinters.Tree
                  TreePrinters.$fFunctorTree_$cfmap
                  TreePrinters.$fFunctorTree_$c<$ -}
944fd93808ac6b45d4910c76f15dfd64
  $fFunctorTree_$c<$ ::
    a -> TreePrinters.Tree b -> TreePrinters.Tree a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: TreePrinters.Tree b) ->
                 TreePrinters.$fFunctorTree_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> eta)
                   eta1) -}
944fd93808ac6b45d4910c76f15dfd64
  $fFunctorTree_$cfmap ::
    (a -> b) -> TreePrinters.Tree a -> TreePrinters.Tree b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
944fd93808ac6b45d4910c76f15dfd64
  $fShowTree ::
    GHC.Show.Show a => GHC.Show.Show (TreePrinters.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (TreePrinters.Tree a)
                  (TreePrinters.$fShowTree_$cshowsPrec @ a $dShow)
                  (TreePrinters.$fShowTree_$cshow @ a $dShow)
                  (TreePrinters.$fShowTree_$cshowList @ a $dShow) -}
bea83e5890fae02a2e6d335fb03d02dd
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
944fd93808ac6b45d4910c76f15dfd64
  $fShowTree_$cshow ::
    GHC.Show.Show a => TreePrinters.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: TreePrinters.Tree a) ->
                 TreePrinters.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
944fd93808ac6b45d4910c76f15dfd64
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [TreePrinters.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [TreePrinters.Tree a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (TreePrinters.Tree a)
                   (TreePrinters.$fShowTree_$cshowsPrec
                      @ a
                      $dShow
                      TreePrinters.$fShowTree1)
                   eta
                   eta1) -}
944fd93808ac6b45d4910c76f15dfd64
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> TreePrinters.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
6e2bd6a52295b74649f2d5d0c66ca988
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7901451653000132038##
                   17003993364788334642##
                   TreePrinters.$trModule
                   TreePrinters.$tc'Leaf1) -}
a6bfe85e92dffc6d992a3ca6f5159e64
  $tc'Leaf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Leaf"#) -}
8a9e41f7aab8d713861dd604ac713212
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13879318062515683879##
                   14961294939849240387##
                   TreePrinters.$trModule
                   TreePrinters.$tc'Node1) -}
7f6a15062a9490657064a26533db7ad8
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
e1806400e134ad413b415460524fe9e0
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12237504864856615936##
                   7632287218179452013##
                   TreePrinters.$trModule
                   TreePrinters.$tcTree1) -}
709c9cad71961593a13e24621aa82a53
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tree"#) -}
5b8a7a9b5285143a9a084318074c0fc6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TreePrinters.$trModule2
                   TreePrinters.$trModule1) -}
02011d8a2a8beb85c51d80967537d11a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TreePrinters"#) -}
a5d48cc861a9709270fd432cc7718402
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "tree-0.1.0.0-JpsvyQa6nxvD4Ud8cPg3VY"#) -}
944fd93808ac6b45d4910c76f15dfd64
  data Tree a
    = Leaf | Node a (TreePrinters.Tree a) (TreePrinters.Tree a)
d0a5c862e8181bb60e8d2452e05e584a
  type TreeRows = [GHC.Base.String]
b2976abe9748173ff2990c268d018f24
  directoryPrint ::
    GHC.Show.Show a => TreePrinters.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: TreePrinters.Tree a) ->
                 letrec {
                   treeIndent :: TreePrinters.Tree a -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: TreePrinters.Tree a) ->
                     case ds of wild {
                       TreePrinters.Leaf -> TreePrinters.directoryPrint5
                       TreePrinters.Node k lb rb
                       -> GHC.Types.:
                            @ [GHC.Types.Char]
                            (GHC.CString.unpackAppendCString#
                               "--"#
                               (GHC.Show.show @ a $dShow k))
                            (let {
                               ds1 :: ([GHC.Types.Char], [[GHC.Types.Char]])
                               = case treeIndent rb of wild1 {
                                   [] -> TreePrinters.directoryPrint4 : r rs -> (r, rs) }
                             } in
                             let {
                               z :: [GHC.Types.Char]
                               = GHC.CString.unpackAppendCString#
                                   "  `"#
                                   (case ds1 of ds2 { (,) r rs -> r })
                             } in
                             let {
                               z1 :: [[GHC.Types.Char]]
                               = case ds1 of ds2 { (,) r rs ->
                                 GHC.Base.map
                                   @ [GHC.Types.Char]
                                   @ [GHC.Types.Char]
                                   TreePrinters.directoryPrint2
                                   rs }
                             } in
                             let {
                               z2 :: [[GHC.Types.Char]] = GHC.Types.: @ [GHC.Types.Char] z z1
                             } in
                             letrec {
                               go :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [[GHC.Types.Char]]) ->
                                 case ds2 of wild1 {
                                   [] -> z2
                                   : y ys
                                   -> GHC.Types.:
                                        @ [GHC.Types.Char]
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           TreePrinters.directoryPrint1
                                           y)
                                        (go ys) }
                             } in
                             go (treeIndent lb)) }
                 } in
                 Data.OldList.unlines (treeIndent eta)) -}
e3dde5a38ec8b1ab207da283df9c0654
  directoryPrint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "  |"#) -}
c59a5eb330c37c2d1d146ecdc3ef522a
  directoryPrint2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   TreePrinters.directoryPrint3) -}
b547a2dcba1aba62fdeeb06b5b335ab9
  directoryPrint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "   "#) -}
9c4fdc64ae5f6349b91f9090c7179cd8
  directoryPrint4 :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: x -}
babd5ad457a499b92f9bad1b3f63efed
  directoryPrint5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   TreePrinters.directoryPrint6
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
9c93ffe4a938e1696a915fd3b8cffacc
  directoryPrint6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-- /-"#) -}
cd490f9990013e99ec8a49d80daa41bd
  rowPrinter ::
    TreePrinters.Tree GHC.Base.String -> TreePrinters.TreeRows
  {- Arity: 1, Strictness: <S,1*U> -}
10935c9d4690bf3eb106ad60287c23e4
  verticalPrint ::
    GHC.Show.Show a => TreePrinters.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,1*C(U),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (eta :: TreePrinters.Tree a) ->
                 Data.OldList.unlines
                   (TreePrinters.rowPrinter
                      (TreePrinters.$fFunctorTree_$cfmap
                         @ a
                         @ GHC.Base.String
                         (GHC.Show.show @ a $dShow)
                         eta))) -}
instance [safe] GHC.Base.Functor [TreePrinters.Tree]
  = TreePrinters.$fFunctorTree
instance [safe] GHC.Show.Show [TreePrinters.Tree]
  = TreePrinters.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

