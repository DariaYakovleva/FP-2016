
==================== FINAL INTERFACE ====================
2016-11-07 13:38:10.443371 UTC

interface main@main:Main 8001
  interface hash: da55a0cca58bf292ae9010ba5158c27e
  ABI hash: 2e12dfbd60fe36acee0cdcf94db4f07a
  export-list hash: 7646e387c0c17eebaf9ab0d914498850
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0a8284aa853a8d3ba7074162f4323b5b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.f
  Main.funs
  Main.funs2
  Main.g
  Main.h
  Main.main
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      task1-0.1.0.0@task1-0.1.0.0-GnFPPKDIVzl3p0BF4zVnrQ
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:System.IO c1068c4f4231e3198e330f99a58145b0
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  task1-0.1.0.0@task1-0.1.0.0-GnFPPKDIVzl3p0BF4zVnrQ:Lib 7b0f0e912a40f77ceb5bba7a6e875e35
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
0dbd3b3a0a1f4ae93d9474bc2a507c75
  f :: GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT
                   -> GHC.Base.Just
                        @ GHC.Types.Int
                        (GHC.Types.I# (GHC.Prim.*# ds2 4#))
                   0# -> GHC.Base.Nothing @ GHC.Types.Int } }) -}
f7abebd7834fb5db1c88444e5a454ae7
  funs :: GHC.Base.Monad m => a -> [a -> m a] -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,1*C1(U),A)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   (x :: a)
                   (ff :: [a -> m a]) ->
                 Main.funs2
                   @ m
                   @ a
                   $dMonad
                   (GHC.Base.return @ m $dMonad @ a x)
                   ff) -}
6200cca345f6a3440bde7a1554a2afd4
  funs2 :: GHC.Base.Monad m => m a -> [a -> m a] -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A)><L,U><S,1*U> -}
c5035f33792f71b3b669d7d4478bc1e8
  funs_$sfuns2 ::
    GHC.Base.Maybe a -> [a -> GHC.Base.Maybe a] -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6b935600cd9638711a13b033f36b311a
  g :: GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT
                   -> GHC.Base.Just
                        @ GHC.Types.Int
                        (GHC.Types.I# (GHC.Prim.+# ds2 3#))
                   0# -> GHC.Base.Nothing @ GHC.Types.Int } }) -}
434167d9b709fa70b0ea54a54a8c42f0
  h :: GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT
                   -> GHC.Base.Just
                        @ GHC.Types.Int
                        (GHC.Types.I# (GHC.Prim.*# ds2 2#))
                   0# -> GHC.Base.Nothing @ GHC.Types.Int } }) -}
77699df8be8f11172345f19a6244193c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2ce98c32b2f259f93762a2d50df08a43
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main11
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main8
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv2 } }) -}
05091dc49c7147bd1291d9d94d5f0c6b
  main10 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
795ccb55503ce536371e4511c5cb93cb
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   Main.main12) -}
96d64fce2179ef5de75a0caba04d51fd
  main12 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString Main.main14 Main.main13) -}
b9cda03da27371220540bc8ad5574e3f
  main13 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cec0494668dc316bd953781bb5affe6b
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CW2.1"#) -}
d8efe3b4843dfecf37a43183a3102582
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
f1cd67a44c85f64d0c820790858e9277
  main2 :: GHC.Base.String
  {- Unfolding: (case Main.funs_$sfuns2
                        @ GHC.Types.Int
                        Main.main6
                        Main.main3 of wild {
                   GHC.Base.Nothing -> GHC.Show.$fShowMaybe3
                   GHC.Base.Just b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GHC.Show.$fShowMaybe1
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
6175b21cc6fd55c77c94779cc6394fb9
  main3 :: [GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int)
                   Main.f
                   Main.main4) -}
d3e0040aa64d50c43704076b85934fdf
  main4 :: [GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int)
                   Main.g
                   Main.main5) -}
be83db29ed1414b2cf6115336a800b60
  main5 :: [GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int)
                   Main.h
                   (GHC.Types.[]
                      @ (GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int))) -}
ca68ee17bce2e69d8ad4b849f012f371
  main6 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.main7) -}
94100dd881f7528fb21b1a085fc83302
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
3ddcccc05528e5b71d4120a6c5cd8b98
  main8 :: GHC.Base.String
  {- Unfolding: (case Main.funs_$sfuns2
                        @ GHC.Types.Int
                        Main.main9
                        Main.main3 of wild {
                   GHC.Base.Nothing -> GHC.Show.$fShowMaybe3
                   GHC.Base.Just b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GHC.Show.$fShowMaybe1
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
7469f27313a18cabebda25ce509bd986
  main9 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.main10) -}
"SPEC funs2 @ Maybe _" [ALWAYS] forall @ a
                                       ($dMonad :: GHC.Base.Monad GHC.Base.Maybe)
  Main.funs2 @ GHC.Base.Maybe @ a $dMonad = Main.funs_$sfuns2 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

